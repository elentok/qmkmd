import { calcColumnWidths, layerQmkName } from "./layer.ts"
import { expandLayer } from "./expand-layer.ts"
import { Layer, Layout } from "../types.ts"

export function writeQmkCode(layout: Layout): string[] {
  const lines = [
    "// This file has been auto-generated by qmkmd (https://github.com/elentok/qmkmd)",
    ...writeQmkLayersEnumCode(layout),
    "",
    ...writeQmkLayersCode(layout),
  ]

  return lines
}

function writeQmkLayersEnumCode(layout: Layout): string[] {
  return [
    "enum layers {",

    ...layout.layers.map((layer, index) => {
      const qmkName = layerQmkName(layer.name)
      return (index === 0) ? `  ${qmkName} = 0,` : `  ${qmkName},`
    }),
    "};",
  ]
}

function writeQmkLayersCode(layout: Layout) {
  const expandedLayers = layout.layers.map((layer) => expandLayer(layer, layout))
  const columnWidths = calcColumnWidths(expandedLayers)

  return [
    "const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {",
    ...expandedLayers.map((layer) => writeQmkLayerCode(layer, columnWidths, layout)).flat(),
    "};",
  ]
}

function writeQmkLayerCode(expandedLayer: Layer, columnWidths: number[], layout: Layout): string[] {
  const { options, structure } = layout
  const { name, rows } = expandedLayer

  const lines: string[] = []

  lines.push(`  [${layerQmkName(name)}] = ${options.layoutFn}(`)

  for (let rowIndex = 0; rowIndex < structure.rows.length; rowIndex++) {
    const row = structure.rows[rowIndex]

    const rowParts: string[] = []

    for (let colIndex = 0; colIndex < row.length; colIndex++) {
      const cell = rows[rowIndex][colIndex]
      const colWidth = columnWidths[colIndex] + 1

      if (cell === "separator") {
        rowParts.push(" /* || */ ")
      } else if (cell == null) {
        rowParts.push("".padEnd(colWidth))
      } else {
        rowParts.push(`${cell.mapping},`.padEnd(colWidth))
      }
    }

    const line = "    " + rowParts.join(" ").trimEnd()
    lines.push(line)
  }

  lines[lines.length - 1] = lines[lines.length - 1].replace(/,$/, "")

  lines.push("  ),")

  return lines
}
